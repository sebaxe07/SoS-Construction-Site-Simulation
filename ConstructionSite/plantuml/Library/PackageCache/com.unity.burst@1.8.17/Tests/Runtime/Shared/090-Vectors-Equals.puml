@startuml
class VectorsEquality <<partial>> {
    + {static} Float4Equals(a:float4, b:float4) : bool
    + {static} Float4Equality(a:float4, b:float4) : int
    + {static} Float4Inequality(a:float4, b:float4) : int
    + {static} Float4EqualityWithFloat(a:float4, b:float) : int
    + {static} Float4InequalityWithFloat(a:float4, b:float) : int
    + {static} Float3Equals(a:float3, b:float3) : bool
    + {static} Float3Equality(a:float3, b:float3) : int
    + {static} Float3Inequality(a:float3, b:float3) : int
    + {static} Float3EqualityWithFloat(a:float3, b:float) : int
    + {static} Float3InequalityWithFloat(a:float3, b:float) : int
    + {static} Float2Equals(a:float2, b:float2) : bool
    + {static} Float2Equality(a:float2, b:float2) : int
    + {static} Float2Inequality(a:float2, b:float2) : int
    + {static} Float2EqualityWithFloat(a:float2, b:float) : int
    + {static} Float2InequalityWithFloat(a:float2, b:float) : int
    + {static} Int4Equals(a:int4, b:int4) : bool
    + {static} Int4Equality(a:int4, b:int4) : int
    + {static} Int4Inequality(a:int4, b:int4) : int
    + {static} Int4EqualityWithScalar(a:int4, b:int) : int
    + {static} Int4InequalityWithScalar(a:int4, b:int) : int
    + {static} Int3Equals(a:int3, b:int3) : bool
    + {static} Int3Equality(a:int3, b:int3) : int
    + {static} Int3Inequality(a:int3, b:int3) : int
    + {static} Int3EqualityWithScalar(a:int3, b:int) : int
    + {static} Int3InequalityWithScalar(a:int3, b:int) : int
    + {static} Int2Equals(a:int2, b:int2) : bool
    + {static} Int2Equality(a:int2, b:int2) : int
    + {static} Int2Inequality(a:int2, b:int2) : int
    + {static} Int2EqualityWithScalar(a:int2, b:int) : int
    + {static} Int2InequalityWithScalar(a:int2, b:int) : int
    + {static} UInt4Equals(a:uint4, b:uint4) : bool
    + {static} UInt4Equality(a:uint4, b:uint4) : int
    + {static} UInt4Inequality(a:uint4, b:uint4) : int
    + {static} UInt4EqualityWithScalar(a:uint4, b:uint) : int
    + {static} UInt4InequalityWithScalar(a:uint4, b:uint) : int
    + {static} UInt3Equals(a:uint3, b:uint3) : bool
    + {static} UInt3Equality(a:uint3, b:uint3) : int
    + {static} UInt3Inequality(a:uint3, b:uint3) : int
    + {static} UInt3EqualityWithScalar(a:uint3, b:uint) : int
    + {static} UInt3InequalityWithScalar(a:uint3, b:uint) : int
    + {static} UInt2Equals(a:uint2, b:uint2) : bool
    + {static} UInt2Equality(a:uint2, b:uint2) : int
    + {static} UInt2Inequality(a:uint2, b:uint2) : int
    + {static} UInt2EqualityWithScalar(a:uint2, b:uint) : int
    + {static} UInt2InequalityWithScalar(a:uint2, b:uint) : int
    + {static} Bool4Equals(a:bool4, b:bool4) : bool
    + {static} Bool4Equality(a:bool4, b:bool4) : int
    + {static} Bool4Inequality(a:bool4, b:bool4) : int
    + {static} Bool4EqualityWithScalar(a:bool4, b:bool) : int
    + {static} Bool4InequalityWithScalar(a:bool4, b:bool) : int
    + {static} Bool3Equals(a:bool3, b:bool3) : bool
    + {static} Bool3Equality(a:bool3, b:bool3) : int
    + {static} Bool3Inequality(a:bool3, b:bool3) : int
    + {static} Bool3EqualityWithScalar(a:bool3, b:bool) : int
    + {static} Bool3InequalityWithScalar(a:bool3, b:bool) : int
    + {static} Bool2Equals(a:bool2, b:bool2) : bool
    + {static} Bool2Equality(a:bool2, b:bool2) : int
    + {static} Bool2Inequality(a:bool2, b:bool2) : int
    + {static} Bool2EqualityWithScalar(a:bool2, b:bool) : int
    + {static} Bool2InequalityWithScalar(a:bool2, b:bool) : int
}
@enduml
